<anf>

    <!-- bloco de configuracoes globais -->
    <!-- a declaracao dos componentes deste bloco e' obrigatoria --> 
    <globals>
        <!-- Parametros de desenho -->
        <!-- Valores para mode: "fill" , "line", "point" -->
        <!-- Valores para shading: "flat", "gouraud" ) -->
        <drawing mode="fill" shading="gouraud" background="0.5 0.5 0.5 0" />
 
        <!-- Parametros de culling -->
        <!-- Valores para cullface: "none", "back" , "front" ou "both" -->
        <!-- Valores para cullorder : "ccw" ou "cw" -->
        <culling face="both" order="ccw" />
 
        <!-- Parametros de iluminacao; seguem os parametros do OpenGL  -->
        <lighting doublesided="true" local="true" enabled="true" ambient="0.2 0.2 0.2 1" />
    </globals>
    
    <!-- bloco de camaras: o atributo "initial" identifica a camara/ponto de vista inicial, que tem de existir -->
    <cameras initial="1" >
        <!-- tem de existir, pelo menos uma camara dos tipos seguintes (perspective ou ortho) -->
        <!-- no caso da camara ortho, o atributo "direction" define o eixo segundo o qual se efetua a projecao -->

        <perspective id="1" near="1.0" far="1.5" angle="8.5" pos="13.2 2.5 3.7" target="15.0 16.0 11.0" />
        <ortho id="2" direction="z" near="1.5" far="5.8" left="2.1" right="4.2" top="5.1" bottom="5" />

    </cameras>
  

    <!-- bloco de luzes -->
    <lights>
            <!-- Deve existir pelo menos uma luz declarada -->
            <!-- Atributo "marker" indica se deve ou nao desenhar-se uma esfera representativa -->
            <light id="1" type="omni" enabled="true" marker="false" pos="13.2 2.5 3.7" >
               <component type="ambient" value=" 0.2 0.2 0.2 1" />
               <component type="diffuse" value="0.1 0.5 0.7 0.3" />
               <component type="specular" value="0.6 0.12 0.65 1" />

            </light>

            <light id="2" type="spot" enabled="false" marker="true" pos="5.2 2.6 3.7" target="4.0 16.0 11.0"  
                angle="5.1" exponent="2.1" >
			   <component type="ambient" value=" 0.3 0.5 0.2 1" />
               <component type="diffuse" value="0.1 0.5 0.1 0.3" />
               <component type="specular" value="0.7 0.12 0.5 1" />

            </light>
    </lights>

    <!-- bloco de texturas. Este bloco tem de existir mas pode estar vazio, se nao forem usadas texturas -->
    <!--   ver topico 'Notas finais' no enunciado sobre os parametros texlength_... -->
    <textures>       
          <texture id="1" file="textura1" texlength_s="3.0" texlength_t="4.0" />
    </textures>
    <!-- bloco de materiais; -->
    <appearances>
        <!-- deve existir um ou mais blocos "appearance" -->
        <!-- IMPORTANTE: -->
        <!--   textureref e opcional, a utilizar caso haja textura associada a esta aparencia --> 
        <appearance id="1" shininess="0.3" textureref="1" >
               <component type="ambient" value=" 0.3 0.5 0.2 1" />
               <component type="diffuse" value="0.1 0.5 0.1 0.3" />
               <component type="specular" value="0.7 0.12 0.5 1" />
        </appearance>
    </appearances>

    <!-- bloco do grafo; "rootid" identifica o no de raiz -->
    <graph rootid="ss">

        <!-- tem de existir, pelo menos, um bloco "node" -->
        <node id="ss">
            <!-- bloco "transforms" obrigatorio -->
            <transforms>
                <!-- deve conter transformacoes explicitas usando as instrucoes seguintes sem limite nem ordem -->
                <!-- ex: bloco transforms pode ficar sem conteudo -->
                <!-- ex: bloco transforms pode ser R,T (nao tem S) -->
                <!-- ex: bloco transforms pode ser R,S,T,S -->
                <transform type="translate" to="ff ff ff" />
                <transform type="rotate" axis="ee" angle="ff" />
                <transform type="scale" factor="ff ff ff" />
            </transforms>
          
            <!-- declaracao da aparencia a utilizar -->
            <!-- se id="inherit", o no' mantem (herda) a aparencia do "pai" -->

            <appearanceref id="ss" />
 
                              
             <!-- conteudo do no; deve existir pelo menos um bloco "primitives" ou um "descendants" -->
             <!-- podem existir ambos -->

             <!-- bloco "primitives" --> 
            <primitives>
                <!-- podem existir varias primitivas -->

                <!-- Primitivas : rectangle, triangle, cylinder, sphere, torus -->
                <!--   Comandos a serem interpretados genericamente como em OpenGL/GLUT, exceto -->
                <!--   o cilindro, que deve adicionalmente ter topos ou tampas) -->            
                <rectangle xy1="ff ff" xy2="ff ff" />
                <triangle xyz1="ff ff ff" xyz2="ff ff ff" xyz3="ff ff ff" />
                <cylinder base="ff" top="ff" height="ff" slices="ii" stacks="ii" />      <!-- deve ter topos -->
                <sphere radius="ff" slices="ii" stacks="ii" />
                <torus inner="ff" outer="ff" slices="ii" loops="ii" />
             </primitives>
               
             <!-- bloco "descendants" -->
            <descendants>
                <!-- Referencia a outros elementos do grafo -->
                <!-- (repetir o no. de vezes necessario) -->
                <!-- LEMBRANDO: qualquer no' pode ser referenciado previamente 'a sua declaracao; isto -->
                <!--            e', a ordem pela qual os nos sao declarados e' irrelevante -->

                <noderef id="ss" />

            </descendants>
        </node>
    </graph>
</anf>