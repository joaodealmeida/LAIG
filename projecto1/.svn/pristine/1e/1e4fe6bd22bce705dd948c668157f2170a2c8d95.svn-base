#include "DemoScene.h"
#include "CGFaxis.h"
#include "CGFapplication.h"

#include "Rectangle.h"
#include "Cylinder.h"
#include "Torus.h"

#include <math.h>

#include "CGFappearance.h"

void DemoScene::init() 
{

	x1 = new XMLScene("room.anf");



	//Enables lighting computations
	glEnable(GL_LIGHTING);

	// Sets up some lighting parameters
	glLightModelf( GL_LIGHT_MODEL_TWO_SIDE, GL_FALSE);
	glLightModelfv(GL_LIGHT_MODEL_AMBIENT, CGFlight::background_ambient);  // Define ambient light
	
	// Declares and enables a light
	float light0_pos[4] = {4.0, 6.0, 5.0, 1.0};
	//light0 = new CGFlight(GL_LIGHT0, light0_pos);
	//light0->enable();*/
	applyGlobals();
	applyLights();
	// Defines a default normal
	//glNormal3f(0,0,1);

	p1 = new PerspectiveCamera("1",true);
	p1->setAngle(45);
	p1->setNear(0.1);
	p1->setFar(50);
	float pos[3] = {10.5 , 8.0, 12.0};
	p1->setPosition(pos);
	float tar[3] = {8.5 , 4.0, 8.5};
	p1->setTarget(tar);

	o1 = new OrthoCamera("2",true);
	o1->setDirection("y");
	o1->setBottom(-10);
	o1->setTop(10);
	o1->setLeft(-10);
	o1->setRight(10);
	o1->setNear(-10);
	o1->setFar(10);
	

	CGFscene::activeCamera = p1;
	CGFapplication::activeApp->forceRefresh();

	obj=new Cylinder(GL_FILL,GL_FLAT,1,1,5,10,10);
	//obj2=new Torus(20,10,20,20);
	materialAppearance=new CGFappearance();
	textureAppearance=new CGFappearance("../data/pyramid.jpg",GL_REPEAT, GL_REPEAT);
	shader=new CGFshader("../data/texshader.vert","../data/texshader.frag");

	setUpdatePeriod(30);
}

void DemoScene::applyGlobals(){
	//Drawing

	if (x1->drawMode.compare("fill") == 0) {
		glPolygonMode(GL_FRONT_AND_BACK,GLU_FILL);
	}else if(x1->drawMode.compare("line") == 0){
		glPolygonMode(GL_FRONT_AND_BACK,GLU_LINE);
	}else
		glPolygonMode(GL_FRONT_AND_BACK,GLU_POINT);



	if (x1->shading.compare("flat") == 0) {
		glShadeModel(GL_FLAT);
	}else
		glShadeModel(GL_SMOOTH);


	glClearColor(x1->drawBackground[0],x1->drawBackground[1],x1->drawBackground[2],x1->drawBackground[3]);


	//Culling

	if (x1->cullFace.compare("none") == 0) {
		glCullFace(GL_NONE);
	}else if(x1->cullFace.compare("back")){
		glCullFace(GL_BACK);
	}else if (x1->cullFace.compare("front")){
		glCullFace(GL_FRONT);
	}
	else
		glCullFace(GL_FRONT_AND_BACK);
	
	
	
	if (x1->cullOrder.compare("ccw") == 0) {
		glFrontFace(GL_CCW);
	}else
		glFrontFace(GL_CW);

	//Lighting
	
	glLightModeli(GL_LIGHT_MODEL_TWO_SIDE, x1->lightDoubleSided);

	glLightModeli(GL_LIGHT_MODEL_LOCAL_VIEWER,x1->lightLocal);

	if(x1->lightEnabled)
		glEnable(GL_LIGHTING);

	glLightModelfv(GL_LIGHT_MODEL_AMBIENT, x1->lightAmbient);
}

void DemoScene::applyLights(){
	for(OmniLight *o1 : x1->omniLightVec){
		o1->enable();
		o1->draw();
	}

	for(SpotLight *spot1 : x1->spotLightVec){
		spot1->enable();
		spot1->draw();
	}
}

void DemoScene::update(unsigned long t)
{
	shader->bind();
	shader->update(t/400.0);
	shader->unbind();
	
}
	
void DemoScene::display() 
{

	// ---- BEGIN Background, camera and axis setup
	
	// Clear image and depth buffer everytime we update the scene
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
	// Initialize Model-View matrix as identity (no transformation
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	
	// Apply transformations corresponding to the camera position relative to the origin
	
	CGFscene::activeCamera->applyView();

	applyLights();

	// Draw (and update) light
	//light0->draw();

	// Draw axis
	axis.draw();


	// ---- END Background, camera and axis setup


	// ---- BEGIN feature demos

	// Simple object
	materialAppearance->apply();
	obj->draw();

	//obj2->draw();
	
	// textured object
	
	//glTranslatef(0,4,0);
	//textureAppearance->apply();
	//obj->draw();

	// shader object

	//glTranslatef(0,4,0);
	//shader->bind();
	//obj->draw();
	
	


	// ---- END feature demos

	// We have been drawing in a memory area that is not visible - the back buffer, 
	// while the graphics card is showing the contents of another buffer - the front buffer
	// glutSwapBuffers() will swap pointers so that the back buffer becomes the front buffer and vice-versa
	glutSwapBuffers();
}

DemoScene::~DemoScene()
{
	delete(shader);
	delete(textureAppearance);
	delete(materialAppearance);
	delete(obj);
	//delete(light0);
}
