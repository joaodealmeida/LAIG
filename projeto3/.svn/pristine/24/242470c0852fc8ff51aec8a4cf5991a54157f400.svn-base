#ifndef BLOCK_H
#define BLOCK_H

#include "CGF\CGFobject.h"
#include "Primitives.h"
#include "Rectangle.h"

#include <vector>

class Block: public Primitives, CGFobject
{
	char orientation;
	int type;
	std::vector <int> position;

public:
	Block(){}
	Block(GLenum drawstyle, GLenum normal, char orientation, int type, std::vector <int> position): Primitives(drawstyle, normal)  {

		this->orientation = orientation;
		this->type = type;
		this->position = position;
	}	

	std::vector <int> getBlockCoordinates() {
		return this->position;
	}

	void draw() {
		glPushMatrix();
		glScalef(0.7,0.7,0.7);
		glTranslatef(7.8, 6, 5);

		// FRONT 
		glBegin(GL_POLYGON);
		glColor3f(   1.0,  1.0, 1.0 );
		glVertex3f(  3, 0, 2 );
		glVertex3f(  3,  4, 2 );
		glVertex3f( 0,  4, 2 );
		glVertex3f( 0, 0, 2 );
		glEnd();

		// BACK
		glPushMatrix();
		glTranslatef(3,0,0);
		glRotatef(180,0,1,0); 

		glBegin(GL_POLYGON);
		glColor3f(   1.0,  1.0, 1.0 );
		glVertex3f(  3, 0, 0 );
		glVertex3f(  3,  4, 0 );
		glVertex3f( 0,  4, 0 );
		glVertex3f( 0, 0, 0 );
		glEnd();
		glPopMatrix();

		// RIGHT
		glBegin(GL_POLYGON);
		glColor3f(  1.0,  0.0,  1.0 );
		glVertex3f( 3, 0, 0 );
		glVertex3f( 3,  4, 0 );
		glVertex3f( 3,  4,  2 );
		glVertex3f( 3, 0,  2 );
		glEnd();

		// LEFT
		glBegin(GL_POLYGON);
		glColor3f(   0.0,  1.0,  0.0 );
		glVertex3f( 0, 0, 2 );
		glVertex3f( 0, 4, 2 );
		glVertex3f( 0, 4, 0 );
		glVertex3f( 0, 0, 0 );
		glEnd();

		// TOP
		glBegin(GL_POLYGON);
		glColor3f(   0.0,  0.0,  1.0 );
		glVertex3f(  3,  4,  2 );
		glVertex3f(  3,  4, -0 );
		glVertex3f( -0,  4, -0 );
		glVertex3f( -0,  4,  2 );
		glEnd();

		// BOTTOM
		glBegin(GL_POLYGON);
		glColor3f(   1.0,  0.0,  0.0 );
		glVertex3f(  3, -0, -0);
		glVertex3f(  3, -0,  2 );
		glVertex3f( -0, -0,  2 );
		glVertex3f( -0, -0, -0 );
		glEnd();

		glPopMatrix();

	}

	

	virtual ~Block(void) {}
};
#endif
