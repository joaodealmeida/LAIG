#ifndef BLOCK_H
#define BLOCK_H

#include "CGF\CGFobject.h"
#include "CGF\CGFtexture.h"
#include "Primitives.h"
#include "Rectangle.h"

#include <vector>



class Block: public Primitives, CGFobject
{
	GLenum drawstyle, normal;
	char orientation;
	int type;
	std::vector <int> position;

public:
	Block(GLenum drawstyle, GLenum normal, char orientation, int type, std::vector <int> position): Primitives(drawstyle, normal)  {
		this->drawstyle = drawstyle;
		this->normal = normal;
		this->orientation = orientation;
		this->type = type;
		this->position = position;
	}	

	Block(){
		this->position.push_back(0);
		this->position.push_back(0);
		this->type = 1;
		this->orientation = 'v';
	}


	void setPosition(std::vector <int> pos){
		this->position = pos;
	}

	int getType(){
		return type;
	}
	void switchType(){
		if (this->type < 3)
			this->type++;
		else
			this->type = 1;

		std::cout << "Piece type changed to: "<< type << std::endl;
	}

	char getOrientation(){
		return orientation;
	}
	void switchOrientation (){
		this->orientation = (this->orientation == 'v' ? 'h' : 'v');
		std::cout << "Piece orientation changed to: "<< orientation << std::endl;
	}

	std::vector <int> getBlockDimentions(){
		std::vector <int> returnVec;

		if (orientation == 'v') {

			switch (type) {

			case 1:
				returnVec.push_back(2);
				returnVec.push_back(4);
				returnVec.push_back(3);

				return returnVec;

			case 2:
				returnVec.push_back(2);
				returnVec.push_back(3);
				returnVec.push_back(4);

				return returnVec;

			case 3:
				returnVec.push_back(3);
				returnVec.push_back(2);
				returnVec.push_back(4);

				return returnVec;

			default:
				printf("Invalid Piece\n");
				exit(1);
			}

		} else if (orientation == 'h') {

			switch (type) {

			case 1:
				returnVec.push_back(3);
				returnVec.push_back(4);
				returnVec.push_back(2);

				return returnVec;

			case 2:
				returnVec.push_back(4);
				returnVec.push_back(3);
				returnVec.push_back(2);

				return returnVec;

			case 3:
				returnVec.push_back(4);
				returnVec.push_back(2);
				returnVec.push_back(3);

				return returnVec;

			default:
				printf("Invalid Piece\n");
				exit(1);
			}

		} else
			printf("Invalid Piece\n");
		exit(1);
	}


	std::vector <int> getBlockPosition() {
		return this->position;
	}



	void draw() {
		
		

		glPushMatrix();
		glTranslatef(6+getBlockPosition()[0], 6, 6+getBlockPosition()[1]);
		if(type == 2) {
			if(orientation == 'v') {
				glTranslatef(0, 0, 4);
				glRotatef(90,0,1,0);
			}
			glTranslatef(4, 0, 0);
			glRotatef(90,0,0,1);
		} else if (type == 3) {
			if(orientation == 'h') {
				glTranslatef(0, 0, 3);
				glRotatef(90,0,1,0);
			}
			glTranslatef(0, 2, 0);
			glRotatef(90,1,0,0);
		} else if (type == 1) {
			if(orientation == 'v') {
				glTranslatef(0, 0, 3);
				glRotatef(90,0,1,0);
			}
		}

		

		// FRONT
		glBegin(GL_POLYGON);
		glNormal3f(0,0,1);
		glTexCoord3f( 3, 0, 2 );
		glVertex3f(  3, 0, 2 );
		glTexCoord3f(  3,  4, 2 );
		glVertex3f(  3,  4, 2 );
		glTexCoord3f( 0,  4, 2 );
		glVertex3f( 0,  4, 2 );
		glTexCoord3f( 0, 0, 2 );
		glVertex3f( 0, 0, 2 );
		glEnd();

		// BACK
		glPushMatrix();
		glTranslatef(3,0,0);
		glRotatef(180,0,1,0);

		glBegin(GL_POLYGON);
		glNormal3f(0,0,-1);
		glTexCoord3f(  3, 0, 0 );
		glVertex3f(  3, 0, 0 );
		glTexCoord3f(  3,  4, 0 );
		glVertex3f(  3,  4, 0 );
		glTexCoord3f( 0,  4, 0 );
		glVertex3f( 0,  4, 0 );
		glTexCoord3f( 0, 0, 0 );
		glVertex3f( 0, 0, 0 );
		glEnd();
		glPopMatrix();

		// RIGHT
		glBegin(GL_POLYGON);
		glNormal3f(1,0,0);
		glTexCoord3f( 3, 0, 0 );
		glVertex3f( 3, 0, 0 );
		glTexCoord3f( 3,  4, 0 );
		glVertex3f( 3,  4, 0 );
		glTexCoord3f( 0,  4,  0 );
		glVertex3f( 3,  4,  2 );
		glTexCoord3f( 0, 0,  0 );
		glVertex3f( 3, 0,  2 );
		glEnd();

		// LEFT
		glBegin(GL_POLYGON);
		glNormal3f(-1,0,0);
		glTexCoord3f( 2, 0, 0 );
		glVertex3f( 0, 0, 2 );
		glTexCoord3f( 2, 4, 0 );
		glVertex3f( 0, 4, 2 );
		glTexCoord3f( 0, 4, 0 );
		glVertex3f( 0, 4, 0 );
		glTexCoord3f( 0, 0, 0 );
		glVertex3f( 0, 0, 0 );
		glEnd();

		// TOP
		glBegin(GL_POLYGON);
		glNormal3f(0,1,0);
		glTexCoord3f(  3,  0,  0 );
		glVertex3f(  3,  4,  2 );
		glTexCoord3f(  3,  4, 0 );
		glVertex3f(  3,  4, -0 );
		glTexCoord3f( 0,  4, 0 );
		glVertex3f( -0,  4, -0 );
		glTexCoord3f( 0,  0,  0 );
		glVertex3f( -0,  4,  2 );
		glEnd();

		// BOTTOM
		glBegin(GL_POLYGON);
		glNormal3f(0,-1,0);
		glTexCoord3f(  3, 0, 0);
		glVertex3f(  3, 0, 0);
		glTexCoord3f(  3, 4,  0 );
		glVertex3f(  3, 0,  2 );
		glTexCoord3f( 0, 4,  0 );
		glVertex3f( 0, 0,  2 );
		glTexCoord3f( 0, 0, 0 );
		glVertex3f( 0, 0, 0 );
		glEnd();

		glPopMatrix();
	}



	virtual ~Block(void) {}
};
#endif