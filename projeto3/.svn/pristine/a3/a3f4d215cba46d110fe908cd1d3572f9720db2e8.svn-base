#include "DemoScene.h"
#include "CGFaxis.h"
#include "CGFapplication.h"

#include "Rectangle.h"
#include "Cylinder.h"
#include "Torus.h"
#include "Block.h"

#include <math.h>

#include "CGFappearance.h"

void DemoScene::init() 
{
	x1 = new XMLScene(const_cast<char *>(name.c_str()));


	for(int i=0; i< x1->omniLightVec.size(); i++)
		sceneLights.push_back(x1->omniLightVec[i]);
	for(int i=0; i< x1->spotLightVec.size(); i++)
		sceneLights.push_back(x1->spotLightVec[i]);

	for(int i=0; i< x1->OrthocamVec.size(); i++)
		sceneCameras.push_back(x1->OrthocamVec[i]);
	for(int i=0; i< x1->PerscamVec.size(); i++)
		sceneCameras.push_back(x1->PerscamVec[i]);
	
	applyLights();
	applyGlobals();


	textureAppearance=new CGFappearance("textures\\winterwall.png",GL_REPEAT, GL_REPEAT);
	obj = new Rectangle(GL_FILL, GL_SMOOTH,0, 0, 4, 4);

	setUpdatePeriod(30);
}

XMLScene* DemoScene::getParserResults(){
	return x1;
}

void DemoScene::applyGlobals(){
	//Drawing
	if (x1->drawMode.compare("fill") == 0) {
		glPolygonMode(GL_FRONT_AND_BACK,GL_FILL);
	}else if(x1->drawMode.compare("line") == 0){
		glPolygonMode(GL_FRONT_AND_BACK,GL_LINE);
	}else
		glPolygonMode(GL_FRONT_AND_BACK,GL_POINT);



	if (x1->shading.compare("flat") == 0) {
		glShadeModel(GL_FLAT);
	}else
		glShadeModel(GL_SMOOTH);


	glClearColor(x1->drawBackground[0],x1->drawBackground[1],x1->drawBackground[2],x1->drawBackground[3]);


	//Culling

	if (x1->cullFace.compare("none") == 0) {
		glCullFace(GL_NONE);
	}else if(x1->cullFace.compare("back") == 0){
		glCullFace(GL_BACK);
	}else if (x1->cullFace.compare("front") == 0){
		glCullFace(GL_FRONT);
	}
	else
		glDisable(GL_CULL_FACE);
	
	
	
	if (x1->cullOrder.compare("ccw") == 0) {
		glFrontFace(GL_CCW);
	}else
		glFrontFace(GL_CW);

	//Lighting
	
	glLightModeli(GL_LIGHT_MODEL_TWO_SIDE, x1->lightDoubleSided);

	glLightModeli(GL_LIGHT_MODEL_LOCAL_VIEWER,x1->lightLocal);

	if(x1->lightEnabled)
		glEnable(GL_LIGHTING);
	else
		glDisable(GL_LIGHTING);
	

	glLightModelfv(GL_LIGHT_MODEL_AMBIENT, x1->lightAmbient);

	//Antialiasing 
	glEnable(GL_POINT_SMOOTH);
	glEnable(GL_LINE_SMOOTH);
	glEnable(GL_POLYGON_SMOOTH);
	glHint (GL_LINE_SMOOTH_HINT, GL_NICEST);
	glHint (GL_POLYGON_SMOOTH_HINT, GL_NICEST);
	glHint (GL_POINT_SMOOTH_HINT, GL_NICEST);
}

void DemoScene::applyLights(){
	for(int i=0; i< x1->omniLightVec.size(); i++){
		OmniLight *o1 = x1->omniLightVec[i];
		if(o1->getMarker())
			o1->draw();
	}

	for(int i=0; i< x1->spotLightVec.size(); i++){
		SpotLight *spot1 = x1->spotLightVec[i];
		if(spot1->getMarker())
			spot1->draw();
	}
}

void DemoScene::drawScene(Node *node){


	x1->visitNode(node, true);

}
void DemoScene::update(unsigned long t)
{
	Animation *a1=nullptr;
	/*for (int i = 0; i < x1->animationsVec.size(); i++){
		a1=x1->animationsVec[i];
		a1->update(t);
	}*/
	for(int i = 0; i < x1->sceneGraph->getGraphNodes().size(); i++)
		 x1->sceneGraph->getGraphNodes()[i]->startAnimation(t);
		

	
}
	
void DemoScene::display() 
{

	// ---- BEGIN Background, camera and axis setup
		//LOAD CAMERA
	bool foundcam=false;
	for(int i=0; i< x1->PerscamVec.size(); i++){
		PerspectiveCamera *p1 = x1->PerscamVec[i];
		if(p1->getEnabled()){
			CGFscene::activeCamera = p1;
			CGFapplication::activeApp->forceRefresh();
			foundcam=true;
			break;

		}
	}

	if(!foundcam){
		for(int i=0; i< x1->OrthocamVec.size(); i++){
			OrthoCamera *o1 = x1->OrthocamVec[i];
			if(o1->getEnabled()){
				CGFscene::activeCamera = o1;
				CGFapplication::activeApp->forceRefresh();
				foundcam=true;
				break;
			}
		}
	}
	// Clear image and depth buffer everytime we update the scene
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
	// Initialize Model-View matrix as identity (no transformation
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	
	// Apply transformations corresponding to the camera position relative to the origin



	CGFscene::activeCamera->applyView();




	
	for(int i=0; i< x1->omniLightVec.size(); i++){
		OmniLight * l = x1->omniLightVec[i];
		l->update();
		if(l->getMarker())
			l->draw();
	}
	for(int i=0; i< x1->spotLightVec.size(); i++){
		SpotLight *l2 = x1->spotLightVec[i];
		l2->update();
		if(l2->getMarker())
			l2->draw();
	}
	axis.draw();
	drawScene(x1->sceneGraph->getRootNode());

	//vector <int> pos;
	//pos.push_back(0);
	//pos.push_back(0);
	//Block* leBlock = new Block(GLU_FILL, GL_SMOOTH,'v', 0, pos);
	//leBlock->draw();

	// Draw (and update) light
	//light0->draw();


	// Draw axis
	//axis.draw();


	// We have been drawing in a memory area that is not visible - the back buffer, 
	// while the graphics card is showing the contents of another buffer - the front buffer
	// glutSwapBuffers() will swap pointers so that the back buffer becomes the front buffer and vice-versa
	glutSwapBuffers();
}

DemoScene::~DemoScene()
{
	delete(shader);
	delete(textureAppearance);
	delete(materialAppearance);
	delete(obj);
	//delete(light0);
}
