#include "TPinterface.h"
#include "DemoScene.h"

#define BUFSIZE 256
GLuint selectBuf[BUFSIZE];

TPinterface::TPinterface(DemoScene *scene)
{
	testVar=0;
	this->scene=scene;

}

void TPinterface::initGUI(){
	GLUI_Panel *newGamePanel = addPanel(const_cast<char *>(std::string("   New Game").c_str()), 1);

	int id = 0;

	addButtonToPanel(newGamePanel, const_cast<char *>(std::string("Player vs AI      ").c_str()), 1);

	addButtonToPanel(newGamePanel, const_cast<char *>(std::string("      AI vs AI      ").c_str()), 2);

	addButtonToPanel(newGamePanel, const_cast<char *>(std::string("Player vs Player").c_str()), 3);


	addColumn();

	GLUI_Panel *optionsPanel = addPanel(const_cast<char *>(std::string("Game Options").c_str()), 1);

	addButtonToPanel(optionsPanel, const_cast<char *>(std::string("   Undo Move    ").c_str()), 4);

	addButtonToPanel(optionsPanel, const_cast<char *>(std::string("    Load Game   ").c_str()), 5);

	addButtonToPanel(optionsPanel, const_cast<char *>(std::string("   Save Replay  ").c_str()), 6);

	GLUI_Panel *themePanel = addPanel(const_cast<char *>(std::string("Game Theme").c_str()), 1);

	addButtonToPanel(themePanel, "Classic", 7);
	addButtonToPanel(themePanel, "Modern", 8);

	addColumn();

	GLUI_Panel *lightsPanel = addPanel(const_cast<char *>(std::string("Lights").c_str()), 1);

	id = 10;

	for (int i=0; i<scene->getParserResults()->omniLightVec.size(); i++) {
		OmniLight * l= scene->getParserResults()->omniLightVec[i];
		GLUI_Checkbox *checkbox = addCheckboxToPanel(lightsPanel, const_cast<char *>(l->getID().c_str()), nullptr, id);

		checkbox->set_int_val(l->getEnabled() ? 1 : 0);

		id++;
	}
	for (int i=0; i<scene->getParserResults()->spotLightVec.size(); i++) {
		SpotLight * l= scene->getParserResults()->spotLightVec[i];
		GLUI_Checkbox *checkbox = addCheckboxToPanel(lightsPanel, const_cast<char *>(l->getID().c_str()), nullptr, id);

		checkbox->set_int_val(l->getEnabled() ? 1 : 0);

		id++;
	}


	addColumn();



	GLUI_Panel *camerasPanel = addPanel(const_cast<char *>(std::string("Camera").c_str()), 1);

	id = 100;

	for (int i=0; i<scene->getParserResults()->OrthocamVec.size(); i++) {
		OrthoCamera *o = scene->getParserResults()->OrthocamVec[i];
		addButtonToPanel(camerasPanel, const_cast<char *>(o->getIdentifier().c_str()), id);

		id++;
	}
	for (int i=0; i<scene->getParserResults()->PerscamVec.size(); i++) {
		PerspectiveCamera * p = scene->getParserResults()->PerscamVec[i];
		addButtonToPanel(camerasPanel, const_cast<char *>(p->getID().c_str()), id);

		id++;
	}

	id=200;


	/*
	GLUI *glui2;
	glui2 = GLUI_Master.create_glui_subwindow( 1, GLUI_SUBWINDOW_BOTTOM );
	glui2->set_main_gfx_window(1);

	GLUI_Rotation *view_rot = glui2->add_rotation( "Rotacao");
	view_rot->set_spin( 1.0 );
	glui2->add_column( true );

	// vector de posicao utilizado pelo botao de afastamento
	float obj_pos[] = { 0.0, 0.0, 0.0 };

	GLUI_Translation *trans_z = glui2->add_translation( "Zoom", GLUI_TRANSLATION_Z, &obj_pos[2] );
	trans_z->set_speed( 0.03 );*/

	//addColumn();

	GLUI_Panel *movePanel = addPanel(const_cast<char *>(std::string("Movement").c_str()), 1);
	addRotationToPanel (movePanel, "Rotation", (float *) 0, 400);
	addTranslationToPanel(movePanel, "Zoom", 1, (float *) 0, 401);
	
}

void TPinterface::processGUI(GLUI_Control *ctrl)
{
	if (ctrl->user_id < 10) {
		switch (ctrl->user_id) {
		case 1:
			//Change to Player vs AI
			LeBloq::getInstance().newGame(12,12);
			LeBloq::getInstance().setGameType(LeBloqGameTypePlayerVsAI_Easy);

			break;

		case 2:
			//Change to AI vs AI
			LeBloq::getInstance().newGame(12,12);
			LeBloq::getInstance().setGameType(LeBloqGameTypeAIVsAI);
			break;

		case 3:
			//Change to Player vs Player
			LeBloq::getInstance().newGame(12,12);
			LeBloq::getInstance().setGameType(LeBloqGameTypePlayerVsPlayer);
			break;

		case 4:
			//Undo Move
			LeBloq::getInstance().undoGameState();
			break;

		case 5:
			//Load Game
			break;

		case 6:
			//Save game
			break;

		case 7:
			for(int i=0; i<scene->getParserResults()->sceneGraph->getGraphNodes().size(); i++){
				Node * n =  scene->getParserResults()->sceneGraph->getGraphNodes()[i];
				for(int j=0; j<n->getPrimitives().size(); j++){
					//Change Appearance to MODERN
				}
			}
			break;

		case 8:
			for(int i=0; i<scene->getParserResults()->sceneGraph->getGraphNodes().size(); i++){
				Node * n =  scene->getParserResults()->sceneGraph->getGraphNodes()[i];
				for(int j=0; j<n->getPrimitives().size(); j++){
					//Change Appearance to CLASSIC
				}
			}
			break;

		default:
			break;
		}
	}else if (ctrl->user_id < 100) {
		int pos=ctrl->user_id - 10;
		int spotlimit,omnilimit;
		vector<OmniLight *> omni = scene->getParserResults()->omniLightVec;
		vector<SpotLight *> spot = scene->getParserResults()->spotLightVec;

		omnilimit = omni.size();
		spotlimit = spot.size();


		if(pos > spotlimit+omnilimit){
			std::cout << " Light not found \n" << std::endl;
			exit(1);

		}else{
			CGFlight *l1 = scene->sceneLights[pos];
			if(l1->getEnabled())
				l1->disable();
			else
				l1->enable();
		}
	} else if( ctrl->user_id < 200) {

		int camPos = (int)(ctrl->user_id - 100);
		int ortholimit,perslimit;
		ortholimit = scene->getParserResults()->OrthocamVec.size();
		perslimit = scene->getParserResults()->PerscamVec.size();
		vector<CGFcamera *> cams = scene->sceneCameras; 

		if (cams.size() < camPos)
			std::cout << "Camera not found \n" << std::endl;

		//Make sure all cameras are disabled
		for(int i=0; i<scene->getParserResults()->OrthocamVec.size(); i++)
			scene->getParserResults()->OrthocamVec[i]->setEnabled(false);

		for(int i=0; i<scene->getParserResults()->PerscamVec.size(); i++)
			scene->getParserResults()->PerscamVec[i]->setEnabled(false);

		if(camPos < ortholimit)
			scene->getParserResults()->OrthocamVec[camPos]->setEnabled(true);

		if(camPos >  ortholimit-1)
			scene->getParserResults()->PerscamVec[camPos-ortholimit]->setEnabled(true);
	}
}

void TPinterface::processMouse(int button, int state, int x, int y) 
{
	CGFinterface::processMouse(button,state, x, y);

	// do picking on mouse press (GLUT_DOWN)
	// this could be more elaborate, e.g. only performing picking when there is a click (DOWN followed by UP) on the same place
	if (button == GLUT_LEFT_BUTTON  && state == GLUT_DOWN){
		performPicking(x,y);
		std::cout << "----------------------------\n"<<"Working Piece:\nxPos: " << LeBloq::getInstance().workingPiece.getBlockPosition()[0] << "\nyPos: " << LeBloq::getInstance().workingPiece.getBlockPosition()[1] << "\nOri: " << LeBloq::getInstance().workingPiece.getOrientation() << "\nType: " << LeBloq::getInstance().workingPiece.getType() << std::endl;
	}
}

void TPinterface::performPicking(int x, int y) 
{
	// Sets the buffer to be used for selection and activate selection mode
	glSelectBuffer (BUFSIZE, selectBuf);
	glRenderMode(GL_SELECT);

	// Initialize the picking name stack
	glInitNames();

	// The process of picking manipulates the projection matrix
	// so we will be activating, saving and manipulating it
	glMatrixMode(GL_PROJECTION);

	//store current projmatrix to restore easily in the end with a pop
	glPushMatrix ();

	//get the actual projection matrix values on an array of our own to multiply with pick matrix later
	GLfloat projmat[16];
	glGetFloatv(GL_PROJECTION_MATRIX,projmat);

	// reset projection matrix
	glLoadIdentity();

	// get current viewport and use it as reference for 
	// setting a small picking window of 5x5 pixels around mouse coordinates for picking
	GLint viewport[4];
	glGetIntegerv(GL_VIEWPORT, viewport);

	// this is multiplied in the projection matrix
	gluPickMatrix ((GLdouble) x, (GLdouble) (CGFapplication::height - y), 5.0, 5.0, viewport);

	// multiply the projection matrix stored in our array to ensure same conditions as in normal render
	glMultMatrixf(projmat);

	// force scene drawing under this mode
	// only the names of objects that fall in the 5x5 window will actually be stored in the buffer
	scene->display();

	// restore original projection matrix
	glMatrixMode (GL_PROJECTION);
	glPopMatrix ();

	glFlush();

	// revert to render mode, get the picking results and process them
	GLint hits;
	hits = glRenderMode(GL_RENDER);
	processHits(hits, selectBuf);
}

void TPinterface::processHits (GLint hits, GLuint buffer[]) 
{
	GLuint *ptr = buffer;
	GLuint mindepth = 0xFFFFFFFF;
	GLuint *selected=NULL;
	GLuint nselected;

	// iterate over the list of hits, and choosing the one closer to the viewer (lower depth)
	for (int i=0;i<hits;i++) {
		int num = *ptr; ptr++;
		GLuint z1 = *ptr; ptr++;
		ptr++;
		if (z1 < mindepth && num>0) {
			mindepth = z1;
			selected = ptr;
			nselected=num;
		}
		for (int j=0; j < num; j++) 
			ptr++;
	}

	// if there were hits, the one selected is in "selected", and it consist of nselected "names" (integer ID's)
	if (selected!=NULL)
	{
		// this should be replaced by code handling the picked object's ID's (stored in "selected"), 
		// possibly invoking a method on the scene class and passing "selected" and "nselected"
		printf("Picked ID's: ");
		for (int i=0; i<nselected; i++)
			printf("%d ",selected[i]);
		printf("\n");

		if(nselected == 1){
			//Codigo para alterar orientacao e tipo de peça aqui
			if(selected[0] == 100){ //Tipo de peca
				LeBloq::getInstance().pickPiece.switchType();
				LeBloq::getInstance().workingPiece.switchType();
			}
			if(selected[0] == 200){ //Orient de peca
				LeBloq::getInstance().pickPiece.switchOrientation();
				LeBloq::getInstance().workingPiece.switchOrientation();
			}

		} else if(nselected == 2) {
			vector <int> position;
			position.push_back(selected[1]);
			position.push_back(selected[0]);

			if(LeBloq::getInstance().getGameType() != LeBloqGameTypeAIVsAI){
				LeBloq::getInstance().workingPiece.setPosition(position);
				LeBloq::getInstance().makePlay();
			}
		}

	}
	else
		printf("Nothing selected while picking \n");	
}